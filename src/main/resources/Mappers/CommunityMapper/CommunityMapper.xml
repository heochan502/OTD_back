<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.otd.onetoday_back.community.mapper.CommunityMapper">

    <!-- ✅ resultMap: content 타입 오류 방지 -->
    <resultMap id="CommunityPostResMap" type="com.otd.onetoday_back.community.dto.CommunityPostRes">
        <id property="postId" column="post_id" />
        <result property="memberNoLogin" column="member_no_login" />
        <result property="memberNick" column="member_nick" />
        <result property="memberImg" column="member_img" />
        <result property="title" column="title" />
        <result property="content" column="content" jdbcType="VARCHAR" />
        <result property="filePath" column="filePath" />
        <result property="createdAt" column="created_at" />
        <result property="viewCount" column="view_count" />
        <result property="like" column="like" />
    </resultMap>

    <!-- 게시글 저장 -->
    <insert id="save" parameterType="com.otd.onetoday_back.community.domain.Community">
        INSERT INTO community_post (
        member_no_login,
        title,
        content,
        file_path,
        created_at,
        updated_at,
        view_count,
        `like`
        ) VALUES (
        #{memberNoLogin},
        #{title},
        #{content},
        #{filePath},
        #{createdAt},
        #{updatedAt},
        #{viewCount},
        #{like}
        )
    </insert>

    <!-- 게시글 첨부파일 저장 -->
    <insert id="saveFile"  parameterType="com.otd.onetoday_back.community.domain.Community">
        INSERT INTO community_postfile (
        post_id,
        member_no_login,
        file_name,
        file_path,
        file_type,
        uploaded_at
        ) VALUES (
        #{postId},
        #{memberNoLogin},
        #{fileName},
        #{filePath},
        #{fileType},
        #{uploadedAt}
        )
    </insert>

    <!-- 게시글 목록 조회 (대표 파일 1개 + 작성자 정보 포함) -->
    <select id="findAll" resultType="com.otd.onetoday_back.community.dto.CommunityPostRes">
        SELECT
        p.post_id AS postId,
        p.member_no_login AS memberNoLogin,
        m.member_nick AS memberNick,
        m.member_img AS memberImg,
        p.title,
        p.content,
        (
        SELECT f.file_path
        FROM community_postfile f
        WHERE f.post_id = p.post_id
        ORDER BY f.uploaded_at ASC
        LIMIT 1
        ) AS filePath,
        p.created_at AS createdAt,
        p.view_count AS viewCount,
        p.`like` AS `like`
        FROM community_post p
        JOIN member m ON p.member_no_login = m.member_no_login
        <where>
            <if test="searchText != null and searchText != ''">
                (p.title LIKE CONCAT('%', #{searchText}, '%')
                OR p.content LIKE CONCAT('%', #{searchText}, '%'))
            </if>
        </where>
        ORDER BY p.post_id DESC
    </select>

    <!-- 게시글 상세 조회 -->
    <select id="findById" resultType="com.otd.onetoday_back.community.dto.CommunityPostRes">
        SELECT
        p.post_id AS postId,
        p.member_no_login AS memberNoLogin,
        m.member_nick AS memberNick,
        m.member_img AS memberImg,
        p.title,
        p.content,
        (
        SELECT f.file_path
        FROM community_postfile f
        WHERE f.post_id = p.post_id
        ORDER BY f.uploaded_at ASC
        LIMIT 1
        ) AS filePath,
        p.created_at AS createdAt,
        p.view_count AS viewCount,
        p.`like` AS `like`
        FROM community_post p
        JOIN member m ON p.member_no_login = m.member_no_login
        WHERE p.post_id = #{postId}
    </select>

    <!-- 게시글 수정 -->
    <update id="modify" parameterType="com.otd.onetoday_back.community.domain.Community">
        UPDATE community_post
        SET
        title = #{title},
        content = #{content},
        updated_at = #{updatedAt}
        WHERE post_id = #{postId}
    </update>

    <!-- 게시글 삭제 -->
    <delete id="deleteById">
        DELETE FROM community_post
        WHERE post_id = #{postId}
    </delete>

    <!-- 댓글 저장 -->
    <insert id="saveComment" parameterType="com.otd.onetoday_back.community.dto.MentReq">
        INSERT INTO community_comment (
        post_id,
        member_no_login,
        content,
        updated_at
        ) VALUES (
        #{postId},
        #{memberNoLogin},
        #{content},
        #{updatedAt}
        )
    </insert>

    <!-- 댓글 목록 조회 (작성자 정보 포함) -->
    <select id="findCommentsByPostId" resultType="com.otd.onetoday_back.community.dto.MentRes">
        SELECT
        c.comment_id AS commentId,
        c.post_id AS postId,
        c.member_no_login AS memberNoLogin,
        m.member_nick AS memberNick,
        m.member_img AS memberImg,
        c.content,
        c.updated_at AS updatedAt
        FROM community_comment c
        JOIN member m ON c.member_no_login = m.member_no_login
        WHERE c.post_id = #{postId}
        ORDER BY c.updated_at ASC
    </select>

    <!-- 댓글 삭제 -->
    <delete id="deleteComment">
        DELETE FROM community_comment
        WHERE comment_id = #{commentId}
    </delete>

    <!-- 게시글 ID별 댓글 수 가져오기 -->
    <select id="countCommentsByPostId" resultType="int">
        SELECT COUNT(*)
        FROM community_comment
        WHERE post_id = #{postId}
    </select>

<!-- 좋아요 토글 -->
    <update id="toggleLike">
        UPDATE community_post
        SET `like` = `like` + 1
        WHERE post_id = #{postId}
    </update>

    <update id="updateLikeCount">
        UPDATE community_post
        SET `like` = #{count}
        WHERE post_id = #{postId}
    </update>



</mapper>
