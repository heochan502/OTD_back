<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.otd.onetoday_back.community.mapper.CommunityMapper">

    <resultMap id="CommunityPostResMap" type="com.otd.onetoday_back.community.dto.CommunityPostRes">
        <id property="postId" column="post_id"/>
        <result property="memberNoLogin" column="member_no_login"/>
        <result property="memberNick" column="member_nick"/>
        <result property="memberImg" column="member_img"/>
        <result property="title" column="title"/>
        <result property="content" column="content"/>
        <result property="filePath" column="file_path"/>
        <result property="createdAt" column="created_at"/>
        <result property="viewCount" column="view_count"/>
        <result property="like" column="like"/>
        <result property="isDeleted" column="is_deleted"/>
        <result property="commentCount" column="comment_count"/>
    </resultMap>

    <!-- 게시글 저장 -->
    <insert id="save" parameterType="com.otd.onetoday_back.community.dto.CommunityPostReq"
            useGeneratedKeys="true" keyProperty="postId">
        INSERT INTO community_post (
        member_no_login, title, content, file_path,
        created_at, updated_at, view_count, `like`
        ) VALUES (
        #{memberNoLogin}, #{title}, #{content}, #{filePath},
        #{createdAt}, #{updatedAt}, #{viewCount}, #{like}
        )
    </insert>

    <!-- 게시글 목록 조회 -->
    <select id="findAll" resultMap="CommunityPostResMap">
        SELECT
        p.post_id,
        p.member_no_login,
        m.member_nick,
        m.member_img,
        p.title,
        p.content,
        (
        SELECT f.file_path
        FROM community_postfile f
        WHERE f.post_id = p.post_id
        ORDER BY f.uploaded_at ASC
        LIMIT 1
        ) AS file_path,
        p.created_at,
        p.view_count,
        p.`like`,
        p.is_deleted,
        (
        SELECT COUNT(*)
        FROM community_comment c
        WHERE c.post_id = p.post_id
        ) AS comment_count
        FROM community_post p
        LEFT JOIN member m ON p.member_no_login = m.member_no_login
        <where>
            <if test="searchText != null and searchText != ''">
                (p.title LIKE CONCAT('%', #{searchText}, '%')
                OR p.content LIKE CONCAT('%', #{searchText}, '%'))
            </if>
        </where>
        ORDER BY p.post_id DESC
    </select>

    <!-- 상세 조회 -->
    <select id="findById" resultMap="CommunityPostResMap">
        SELECT
        p.post_id,
        p.member_no_login,
        m.member_nick,
        m.member_img,
        p.title,
        p.content,
        (
        SELECT f.file_path
        FROM community_postfile f
        WHERE f.post_id = p.post_id
        ORDER BY f.uploaded_at ASC
        LIMIT 1
        ) AS file_path,
        p.created_at,
        p.view_count,
        p.`like`,
        p.is_deleted,
        (
        SELECT COUNT(*)
        FROM community_comment c
        WHERE c.post_id = p.post_id
        ) AS comment_count
        FROM community_post p
        LEFT JOIN member m ON p.member_no_login = m.member_no_login
        WHERE p.post_id = #{postId}
        LIMIT 1
    </select>

    <!-- 게시글 수정 -->
    <update id="modify">
        UPDATE community_post
        SET title = #{title},
        content = #{content},
        updated_at = #{updatedAt}
        WHERE post_id = #{postId}
    </update>

    <!-- 논리 삭제 -->
    <update id="deleteById">
        UPDATE community_post
        SET is_deleted = TRUE
        WHERE post_id = #{postId}
    </update>

    <!-- 단건 조회 -->
    <select id="findPostById" resultMap="CommunityPostResMap">
        SELECT *
        FROM community_post
        WHERE post_id = #{postId}
    </select>

    <!-- 삭제 안 된 게시글 목록 -->
    <select id="selectPosts" resultMap="CommunityPostResMap">
        SELECT
        p.post_id,
        p.member_no_login,
        p.title,
        p.content,
        p.file_path,
        p.created_at,
        p.view_count,
        p.`like`,
        p.is_deleted,
        (
        SELECT COUNT(*)
        FROM community_comment c
        WHERE c.post_id = p.post_id
        ) AS comment_count
        FROM community_post p
        WHERE p.is_deleted = FALSE
        ORDER BY p.created_at DESC
    </select>

    <!-- 댓글 저장 -->
    <insert id="saveComment" parameterType="com.otd.onetoday_back.community.dto.MentReq">
        INSERT INTO community_comment (
        post_id, member_no_login, content, updated_at
        ) VALUES (
        #{postId}, #{memberNoLogin}, #{content}, #{updatedAt}
        )
    </insert>

    <!-- 댓글 목록 -->
    <select id="findCommentsByPostId" resultType="com.otd.onetoday_back.community.dto.MentRes">
        SELECT
        c.comment_id,
        c.post_id,
        c.member_no_login,
        m.member_nick,
        m.member_img,
        c.content,
        c.updated_at
        FROM community_comment c
        LEFT JOIN member m ON c.member_no_login = m.member_no_login
        WHERE c.post_id = #{postId}
        ORDER BY c.updated_at DESC
    </select>

    <!-- 페이징 포함 목록 -->
    <select id="findAllWithPaging" resultMap="CommunityPostResMap">
        SELECT
        p.post_id,
        p.member_no_login,
        m.member_nick,
        m.member_img,
        p.title,
        p.content,
        (
        SELECT f.file_path
        FROM community_postfile f
        WHERE f.post_id = p.post_id
        ORDER BY f.uploaded_at ASC
        LIMIT 1
        ) AS file_path,
        p.created_at,
        p.view_count,
        p.`like`,
        p.is_deleted,
        (
        SELECT COUNT(*)
        FROM community_comment c
        WHERE c.post_id = p.post_id
        ) AS comment_count
        FROM community_post p
        LEFT JOIN member m ON p.member_no_login = m.member_no_login
        <where>
            p.is_deleted = FALSE
            <if test="searchText != null and searchText != ''">
                AND (p.title LIKE CONCAT('%', #{searchText}, '%')
                OR p.content LIKE CONCAT('%', #{searchText}, '%'))
            </if>
        </where>
        ORDER BY p.post_id DESC
        LIMIT #{size} OFFSET #{offset}
    </select>

    <!-- 좋아요 수 업데이트 -->
    <update id="updateLikeCount">
        UPDATE community_post
        SET `like` = #{likeCount}
        WHERE post_id = #{postId}
    </update>

    <!-- 대표이미지 경로 업데이트 (유지) -->
    <update id="updatePostFilePath">
        UPDATE community_post
        SET file_path = #{filePath}, updated_at = NOW()
        WHERE post_id = #{postId}
    </update>

    <!-- 총 개수 -->
    <select id="countAll" resultType="int">
        SELECT COUNT(*)
        FROM community_post
        WHERE is_deleted = FALSE
        <if test="searchText != null and searchText != ''">
            AND (title LIKE CONCAT('%', #{searchText}, '%')
            OR content LIKE CONCAT('%', #{searchText}, '%'))
        </if>
    </select>

    <select id="findFilesByPostId"
            resultType="com.otd.onetoday_back.community.domain.CommunityPostFile">
        SELECT post_id, member_no_login, file_name, file_path, file_type, uploaded_at
        FROM community_postfile
        WHERE post_id = #{postId}
        ORDER BY uploaded_at ASC
    </select>

</mapper>
